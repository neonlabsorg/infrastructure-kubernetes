{{- if .Values.postgres.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "postgres.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
    {{- with .Values.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ template "postgres.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}     
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}     
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
    {{- if .Values.upgrade_14_to_15.enabled }}
      initContainers:
        - name: upgrade-postgres
          image: "neonlabsorg/pg_up_14_to_15:{{ .Values.upgrade_14_to_15.img_tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: /var/lib/postgresql/data
          securityContext:
            runAsUser: 0
          command: ["/bin/bash", "-c"]
          args:
            - |
              su postgres -c "/bin/bash /var/lib/postgresql/init_scripts/upgrade_postgres_db_14_to_15.sh"
          {{- if .Values.volumeMounts }}
          volumeMounts:
          {{- toYaml .Values.volumeMounts | nindent 10 }}
          - name: postgres-config
            mountPath: /var/lib/postgresql/init_scripts/upgrade_postgres_db_14_to_15.sh
            subPath: upgrade_postgres_db_14_to_15.sh
          {{- end }}
    {{- end }}
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          args:
            - -c
            - max_connections={{ .Values.postgresql.maxConnections }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - name: {{ .Values.service.name }}
            containerPort: {{ .Values.service.targetPort }}
            protocol: {{ .Values.service.protocol }}
        {{- if .Values.extraPorts }}
          {{- range .Values.extraPorts }}
          - name: {{ .name }}
            containerPort: {{ .containerPort }}
            protocol: {{ .protocol }}
          {{- end }}
        {{- end }}
        {{- if .Values.envFrom }}        
          envFrom:
          {{- toYaml .Values.envFrom | nindent 10 }}
        {{- end }}  
        {{- if .Values.env }}
          env:
          {{- toYaml .Values.env | nindent 10 }}
        {{- end }}
        {{- if .Values.volumeMounts }}
          volumeMounts:
          {{- toYaml .Values.volumeMounts | nindent 10 }}
        {{- end }}
        {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
        {{- end }}
      volumes:
        - name: postgres-config
          configMap:
            name: postgres-config        
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: postgresdata
      spec:
        accessModes: 
          - {{ .Values.persistence.accessModes }}
        storageClassName: {{ .Values.persistence.storageClass }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}      
{{- end }}      